# Static Ouroboros talk pages migrated from s3 to azure blob store
#
# this file is used to ensure the migrated ouroboros talk domains work correctly
# this nginx config addresses the following issues
#
# 1. some have invalid file names for azure (ending in .)
#    These files were renamed to have a valid end char '_'
#     we now redirect any URLs that end in '.' char
#     to the moved files that end in '_'
#
# 2. Azure handles tailing slashes on URL paths differently from S3 & GCP
#    see https://github.com/zooniverse/static/issues/238#issuecomment-880915033 for details
#    We need to redirect any paths that serve index.html pages to ensure the relative URLs in the page
#    work correctly in the browsers i.e. match the was S3 used to work.

server {
    include /etc/nginx/ssl.default.conf;
    # all ouorboros talk domains
    server_name radiotalk.galaxyzoo.org
                talk.asteroidzoo.org
                talk.chicagowildlifewatch.org
                talk.chimpandsee.org
                talk.condorwatch.org
                talk.diskdetective.org
                talk.galaxyzoo.org
                talk.higgshunters.org
                talk.milkywayproject.org
                talk.operationwardiary.org
                talk.penguinwatch.org
                talk.planetfour.org
                talk.planethunters.org
                talk.planktonportal.org
                talk.sciencegossip.org
                talk.snapshotserengeti.org
                talk.spacewarps.org
                talk.wormwatchlab.org;

  # ensure we redirect to have the trailing slashes on root level paths
  location ~* /(boards|recent)$ {
    # rewrite the URL and search return a 301 redirect for a new location match
    # the resulting Location path will be served by another matching rule in this config (most likely the last one)
    rewrite ^([^.]*[^/])$ $1/ permanent;
  }

  # ensure we redirect to have the trailing slashes on special nested paths but only 1 level down
  location ~* ^/(subjects|boards|tags)/[^\/\.]+?[^\/]$ {
    # rewrite the URL and search return a 301 redirect for a new location match
    # the resulting Location path will be served by another matching rule in this config (most likely the last one)
    rewrite ^([^.]*[^/])$ $1/ permanent;
  }

  # for '/users/username' static pages that do not end in '.' char but without a trailing slash
  # ensure we redirect users name paths to have the trailing '/' chat
  location ~* ^/users/[^\/]+?[^\/]$ {
    # rewrite the URL and search return a 301 redirect for a new location match
    # the resulting Location path will be served by another matching rule in this config (most likely the last one)
    rewrite ^([^.]*[^/])$ $1/ permanent;
    # rewrite and redirect the 3 possible levels of trailing '.' chars, i checked the data and 3 was the max
    # match invalid char endings like ... | .. | .
    rewrite '^(.+?\.{1,3}.*)?$' $1/ permanent;
  }


  # for '/users/username./' static pages that end in an invalid '.' char but with a trailing slash (redirected from above)
  #   note: is combined with above more specific non-trailing slash redirect above to ensure we have the trailing slash
  # '.' chars are illegal in azure so we mapped it to a
  # '_' char path prefix in azure blob store
  # we will proxy pass to the azure blob mapped '_' file prefix
  location ~* ^/users/.+?\.+\/.*?$ {
    # rewrite the 3 possible levels of trailing '.' chars, i checked the data and 3 was the max
    # stop after each rewrite and try the proxy pass
    # note the URI contains the host and rewritten path this is sent to proxy_pass via nginx
    # .../
    rewrite '^(.+?)\.{3}(\/.*)?$' /$host$1___$2 break;
    # ../
    rewrite '^(.+?)\.{2}(\/.*)?$' /$host$1__$2 break;
    # ./
    rewrite ^(.+?)\.(\/.*)?$      /$host$1_$2 break;

    resolver 8.8.8.8;
    proxy_pass             https://zooniversestatic.z13.web.core.windows.net;

    include /etc/nginx/az-proxy-headers.conf;
  }

  # this location serves all other pages on the above domain
  # these aren't busted user file names so they are all valid chars in their paths
  # so we can just proxy pass them straight up
  location / {
    rewrite (?i)\.(jp(e)?g|gif|png|ico|txt|mp(3|4)|webm|og(a|g|m|v|x)|spx|opus|pdf|ttf|tar|gz|tgz|bz2|tbz2|zip)$ https://static.zooniverse.org/$host$request_uri;

    resolver 8.8.8.8;
    proxy_pass             https://zooniversestatic.z13.web.core.windows.net/$host$request_uri;
    include /etc/nginx/az-proxy-headers.conf;
  }
}
